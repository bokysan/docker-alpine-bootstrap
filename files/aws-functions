#!/usr/bin/env bash
# vim: set tabstop=2 softtabstop=2 shiftwidth=2 expandtab:
# Common AWS functions

if command -v libressl >/dev/null 2>&1; then
  export OPENSSL=libressl
elif command -v openssl >/dev/null 2>&1; then
  export OPENSSL=openssl
else
  echo "OpenSSL executable not found, but required for this tool!">&2
  exit 2
fi

if [[ -z "$AWS_CONFIG_FILE" ]]; then
  export AWS_CONFIG_FILE="$HOME/.aws/config"
fi
if [[ -z "$AWS_SHARED_CREDENTIALS_FILE" ]]; then
  export AWS_SHARED_CREDENTIALS_FILE="$HOME/.aws/credentials"
fi

if [[ -z "$AWS_ACCESS_KEY_ID" ]] || [[ -z "$AWS_SECRET_ACCESS_KEY" ]]; then
  if [[ ! -f "$AWS_SHARED_CREDENTIALS_FILE" ]]; then
    echo "AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY and credentials file ($AWS_SHARED_CREDENTIALS_FILE) missing." >&2
    exit 3
  fi

  AWS_KEY_PROFILE="$AWS_PROFILE"
  if [[ -z "$AWS_KEY_PROFILE" ]]; then
    AWS_KEY_PROFILE="default"
  fi

  export AWS_ACCESS_KEY_ID=$(cat "$AWS_SHARED_CREDENTIALS_FILE" | fgrep -A100 "[$AWS_KEY_PROFILE]" | fgrep "aws_access_key_id = " | head -n1 | cut -f2 -d= | tr -d '[:space:]')
  export AWS_SECRET_ACCESS_KEY=$(cat "$AWS_SHARED_CREDENTIALS_FILE" | fgrep -A100 "[$AWS_KEY_PROFILE]" | fgrep "aws_secret_access_key = " | head -n1 | cut -f2 -d= | tr -d '[:space:]')
fi

if [[ -z "$AWS_ACCESS_KEY_ID" ]] || [[ -z "$AWS_SECRET_ACCESS_KEY" ]]; then
  echo "You need to specify either AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY or provide a shared credentials file (usually ~/.aws/credentials) and possibly define AWS_PROFILE." >&2
  exit 1
fi

if [[ -z "$AWS_REGION" ]]; then
  if [[ ! -f "$AWS_CONFIG_FILE" ]]; then
    echo "AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY and config file ($AWS_CONFIG_FILE) missing." >&2
    exit 4
  fi

  export AWS_REGION="$AWS_DEFAULT_REGION"

  AWS_REGION_PROFILE="$AWS_PROFILE"
  if [[ -z "$AWS_REGION_PROFILE" ]]; then
    AWS_REGION_PROFILE="default"
  fi

  if [[ "$AWS_REGION_PROFILE" == "default" ]] && [[ -z "$AWS_REGION" ]]; then
    AWS_PROFILE_REGION=$(cat "$AWS_CONFIG_FILE" | fgrep -A1 "[default]" | fgrep "region = " | head -n1 | cut -f2 -d= | tr -d '[:space:]')
    if [[ -n "$AWS_PROFILE_REGION" ]]; then
      export AWS_REGION="$AWS_PROFILE_REGION"
    fi
  else
    AWS_PROFILE_REGION=$(cat "$AWS_CONFIG_FILE" | fgrep -A1 "[profile $AWS_REGION_PROFILE]" | fgrep "region = " | head -n1 | cut -f2 -d= | tr -d '[:space:]')
    if [[ -n "$AWS_PROFILE_REGION" ]]; then
      export AWS_REGION="$AWS_PROFILE_REGION"
    else
      export AWS_REGION=$(cat "$AWS_CONFIG_FILE" | fgrep -A1 "[default]" | fgrep "region = " | head -n1 | cut -f2 -d= | tr -d '[:space:]')
      if [[ -n "$AWS_PROFILE_REGION" ]]; then
        export AWS_REGION="$AWS_PROFILE_REGION"
      fi
    fi
  fi

fi

if [[ -z "$AWS_REGION" ]]; then
  echo "You need to specify either AWS_REGION, AWS_DEFAULT_REGION or provide a region in config file (usually ~/.aws/config) and possibly define AWS_PROFILE." >&2
  exit 1
fi


export timestamp=$(date -u "+%Y-%m-%d %H:%M:%S")
export signed_headers="date;host;x-amz-content-sha256;x-amz-date"

if [[ $(uname) == "Darwin" ]]; then
  export format="%Y-%m-%d %H:%M:%S"
  export iso_timestamp=$(date -ujf "${format}" "${timestamp}" "+%Y%m%dT%H%M%SZ")
  export date_scope=$(date -ujf "${format}" "${timestamp}" "+%Y%m%d")
  export date_header=$(date -ujf "${format}" "${timestamp}" "+%a, %d %h %Y %T %Z")
else
  export iso_timestamp=$(date -ud "${timestamp}" "+%Y%m%dT%H%M%SZ")
  export date_scope=$(date -ud "${timestamp}" "+%Y%m%d")
  export date_header=$(date -ud "${timestamp}" "+%a, %d %h %Y %T %Z")
fi

payload_hash() {
  set +e
  local output=$(echo -n "${payload}" | $OPENSSL dgst -sha256)
  echo "${output##* }"
  set -e
}

all_signed_headers() {
  local sig_headers="${signed_headers}"
  if [[ -n "$x_amz_target" ]]; then
    sig_headers="${sig_headers};x-amz-target"
  fi
  echo "${sig_headers}"
}

canonical_request() {
  echo "${method}"
  echo "/${src}"
  echo ""
  echo "date:${date_header}"
  echo "host:${host}"
  echo "x-amz-content-sha256:$(payload_hash)"
  echo "x-amz-date:${iso_timestamp}"
  if [[ -n "$x_amz_target" ]]; then
    echo "x-amz-target:$x_amz_target"
  fi
  echo ""
  echo "$(all_signed_headers)"
  printf "$(payload_hash)"
}

canonical_request_hash() {
  set +e
  local output=$(canonical_request | $OPENSSL dgst -sha256)
  echo "${output##* }"
  set -e
}

string_to_sign() {
  echo "AWS4-HMAC-SHA256"
  echo "${iso_timestamp}"
  echo "${date_scope}/${AWS_REGION}/${service}/aws4_request"
  printf "$(canonical_request_hash)"
}

signature_key() {
  local secret=$(printf "AWS4${AWS_SECRET_ACCESS_KEY?}" | hex_key)
  local date_key=$(printf ${date_scope} | hmac_sha256 "${secret}" | hex_key)
  local region_key=$(printf ${AWS_REGION?} | hmac_sha256 "${date_key}" | hex_key)
  local service_key=$(printf "${service}" | hmac_sha256 "${region_key}" | hex_key)
  printf "aws4_request" | hmac_sha256 "${service_key}" | hex_key
}

hex_key() {
  xxd -p -c 256
}

hmac_sha256() {
  local hexkey=$1
  $OPENSSL dgst -binary -sha256 -mac HMAC -macopt hexkey:${hexkey}
}

signature() {
  string_to_sign | hmac_sha256 $(signature_key) | hex_key | sed "s/^.* //"
}
